*update the package.json file with proper information
https://github.com/AdamAlAttrach/digital-moment/blob/main/package.json 
*got to make sure user gets redirected to a route, and doesn't just type it in browser URL


dynamic template through EJS template engine
bootstrap for styling
node.js express
mongoDB -> mongoose
JWT and crystals kyber

i know it's called secure rest API but it's not an api it's an app i changed my mind mid way

/:user/:chatrooms
[user]/userPage
[user]/[chatroom]
[user]/[chatroom]/cha
/:user/createchatroom

once you are logged in, after signup or login, anywhere you go you have /users/:username until jwt expires and have
to login again

make sure only necessary operations are async (doesnt really matter, should still work as expected)

every time a user leaves the room, accepts or declines request. all the operations relating to the database are done 
in the callback function of the HTTP request. for some of these operations, like joining a group. this makes sense.\
but for other operations like declining a request and so on, it doesn't make sense to do the operation directly in the 
callback function. the changes should be cached somewhere, and done later on, like when the user exits the site.

schemas should have validation functions

there should be cleanup for the database, so chatrooms with no members and no admins get deleted off the database.

there should probably be a proper logging system. 

we're using traditional http requests for the first few pages, which are outdated and can be optimized by changing to 
new protocols.


to create the realtime chat:
web sockets is a protocol that allows us to have bidirectional communication. like an open door between your client and 
your server, you don't have to do refresh like traditional http requests (that we used for login/signup/homepage) 

WebSocket is a communication protocol that provides full-duplex communication channels over a single TCP connection. 
It enables bidirectional communication between a client and a server, allowing real-time data transfer.

npm i socket.io (framework for dealing with websockets)
also moment to format date and time(not sure it'll be necessary)

so until now we used:
mongoDB
mongoDB atlas
mongoose
express.js node.js
ejs for template rendering on the front endpoint
JWT
crystals kyber + AES + normal hashing(with salt) for passwords and logs
socket.io